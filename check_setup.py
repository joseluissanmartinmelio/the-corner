#!/usr/bin/env python3
"""
Script para verificar la configuraci√≥n del sitio MkDocs
"""

import os
import sys
import subprocess
import yaml

def check_mkdocs_config():
    """Verificar la configuraci√≥n de MkDocs"""
    print("üîç Verificando configuraci√≥n de MkDocs...")
    
    if not os.path.exists('mkdocs.yml'):
        print("‚ùå No se encontr√≥ mkdocs.yml")
        return False
    
    try:
        with open('mkdocs.yml', 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        print(f"‚úÖ Site name: {config.get('site_name', 'No definido')}")
        print(f"‚úÖ Site URL: {config.get('site_url', 'No definido')}")
        print(f"‚úÖ Theme: {config.get('theme', {}).get('name', 'No definido')}")
        
        return True
    except Exception as e:
        print(f"‚ùå Error al leer mkdocs.yml: {e}")
        return False

def check_docs_folder():
    """Verificar que existan los archivos de documentaci√≥n"""
    print("\nüìÅ Verificando archivos de documentaci√≥n...")
    
    if not os.path.exists('docs'):
        print("‚ùå No se encontr√≥ la carpeta docs/")
        return False
    
    required_files = ['index.md', 'curriculum.md', 'projects.md']
    for file in required_files:
        file_path = os.path.join('docs', file)
        if os.path.exists(file_path):
            print(f"‚úÖ {file} existe")
        else:
            print(f"‚ùå {file} no existe")
            return False
    
    return True

def check_build():
    """Verificar que el sitio se pueda construir"""
    print("\nüî® Verificando construcci√≥n del sitio...")
    
    try:
        result = subprocess.run(['mkdocs', 'build'], 
                              capture_output=True, text=True, cwd='.')
        if result.returncode == 0:
            print("‚úÖ El sitio se construye correctamente")
            return True
        else:
            print(f"‚ùå Error al construir el sitio: {result.stderr}")
            return False
    except FileNotFoundError:
        print("‚ùå MkDocs no est√° instalado")
        return False

def check_github_workflow():
    """Verificar el workflow de GitHub Actions"""
    print("\n‚öôÔ∏è Verificando workflow de GitHub Actions...")
    
    workflow_path = '.github/workflows/deploy.yml'
    if not os.path.exists(workflow_path):
        print("‚ùå No se encontr√≥ el workflow de deploy")
        return False
    
    try:
        with open(workflow_path, 'r', encoding='utf-8') as f:
            workflow = yaml.safe_load(f)
        
        print("‚úÖ Workflow de deploy encontrado")
        print(f"‚úÖ Nombre: {workflow.get('name', 'No definido')}")
        
        # Verificar que se ejecute en push a main
        on_config = workflow.get('on', {})
        if 'push' in on_config and 'main' in on_config['push'].get('branches', []):
            print("‚úÖ Se ejecuta en push a main")
        else:
            print("‚ùå No est√° configurado para ejecutarse en push a main")
        
        return True
    except Exception as e:
        print(f"‚ùå Error al leer el workflow: {e}")
        return False

def main():
    print("üöÄ Verificando configuraci√≥n del sitio MkDocs para GitHub Pages\n")
    
    checks = [
        check_mkdocs_config(),
        check_docs_folder(),
        check_build(),
        check_github_workflow()
    ]
    
    if all(checks):
        print("\nüéâ ¬°Todas las verificaciones pasaron!")
        print("\nüìã Pasos adicionales para verificar:")
        print("1. Ve a Settings > Pages en tu repositorio de GitHub")
        print("2. Aseg√∫rate de que 'Source' est√© configurado como 'GitHub Actions'")
        print("3. Verifica que el workflow se haya ejecutado en la pesta√±a 'Actions'")
        print("4. El sitio deber√≠a estar disponible en: https://joseluissanmartinmelio.github.io/the-corner")
    else:
        print("\n‚ùå Algunas verificaciones fallaron. Revisa los errores arriba.")
    
    return 0 if all(checks) else 1

if __name__ == '__main__':
    sys.exit(main())
